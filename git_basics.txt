Git command line playing (once github already set up)
Barnett 12/15/14

Resources:
https://www.atlassian.com/git/tutorials


setup:

git config --global user.name "ahbarnett"
git config --global user.email "ahb@math.dartmouth.edu"

git config --global credential.helper cache
# get 1-hour of login memory:
git config --global credential.helper 'cache --timeout=3600'

# makes version >2.0 pushes simple:
git config --global push.default simple


clone (download to local dekstop) a repo:

git clone https://github.com/ahbarnett/test

(when is .git suffix needed?)

The local copy is a "remote" (confusingly)

# switch between versions: (overwrites local changes!)
git checkout readme-edits
git checkout master

git status

# make local changes then...
git add README.md
#                    why do we have to "add" a file that's in the original repo?
# add must be done every time just before commit (not like svn add !!)
# Seems like add can be done to a whole directory together.
# "Staging" before a commit (allows breaking down a complex change into
# multiple commits)

git commit -m "tweaked readme"
# doesnt' push to github yet!

# add in all files that have ever been "add"ed and commit :
git commit -a -m "message"

# check where does git think the original copy is? ("origin" = github.com )
git remote -v

git push           # actually uploads to github as a commit
git push origin master  # can choose to push to other branches


# to start editing locally:
git pull             # does fetch then merge
# (a fetch builds a local copy of origin/master, but doesn't merge)

# to discard local changes and revert to repo current version (one file):
 git checkout -- somedir/somefile

# cleanly discard local changes for all files:
git fetch origin
git reset --hard origin/master


# setup up new local repo if not cloning - also needed per-directory I think?
git init
# not really needed unless purely local project.


# to start a branch locally:
git checkout -b feature_x

# visualize log of commits as graph:
git log --oneline --abbrev-commit --all --graph


# From: http://think-like-a-git.net/sections/graphs-and-git/garbage-collection.html
# you can tack the new change on to the previous commit using
git commit --amend
# this is if you forget something small

# "references make commits reachable"

# Creating a branch is like saving securely the current version, so can return to it

# installed gitg visualizer, see list at  http://git-scm.com/download/gui/linux
sudo apt-get install gitg
# shows all branches:
gitg -all &

# upstream pulling is only if forked from a project?
# https://help.github.com/articles/fork-a-repo/

git revert - undoes a commit but makes it a new commit.


# if you tried to add a git project as a subdirectory, it treats it as a
# submodule and prevents it being added, even if you then remove its .git info
# To fix that:

git rm --cached path_to_submodule
git add path_to_submodule



BRANCHING:

# a branch is a "tip" of a series of commits (pointer to commits).
# checkout navigates between branches

# to download and set up local copy of branch:
git checkout -b readme-edits origin/readme-edits

HEAD means current snapshot

# Resolving conflicts:
# http://www.gitguys.com/topics/merging-with-a-conflict-conflicts-and-resolutions/
# shows ======== and <<<<<<< and >>>>>>>> meaning, and usage of
git diff

# Once fixed up conflicted file, do:
git commit -a -m "README conflict resolved"

# then do merge ????
git merge --no-ff readme-edits

git push origin master


git branch -D crazy-experiment        # force delete branch


# include new stuff in the same commit as previous:
git commit --amend
# this breaks after you already pushed a change then tried to amend
# (see git push --help    re amend)

# update changes from origin to local copy:
git pull


---------------- migrate/transfer to new github location, preserving stuff:

Turns out "transfer" is what we want - designed for personal->organization.
Preserves everything, including links from other people, webhooks, issues,
wiki. Is the right thing to do.
https://help.github.com/articles/about-repository-transfers/
Then:
git remote -v    (see where it pushes to)
git remote set-url origin https://github.com/flatironinstitute/finufft.git
git remote -v    (check it worked)

The following transfers everything except Issues and Wiki:
git clone --bare https://github.com/ahbarnett/finufft.git
cd finufft.git
git push --mirror https://github.com/flatironinstitute/finufft.git
(it would also forget the property of being "forked from").

This was wrong:
https://gist.github.com/niksumeiko/8972566
vikas027 commented on Feb 13, 2016
@prashathsenthil You have to run these commands as below
git clone --mirror <url_of_old_repo>
cd <name_of_old_repo>
git remote add new-origin <url_of_new_repo>
git push new-origin --mirror
Got: (deny updating a hidden ref)

-------- removing the "forked from...":
https://stackoverflow.com/questions/16052477/delete-fork-dependency-of-a-github-repository
Ans: contact github support, easy.


-------------------- git diff:

git whatchanged --since="1 day ago" -p
git whatchanged --since="1 day ago" -p <file>   # see changes for a specific file only

----- updating a fork to its master:
https://garygregory.wordpress.com/2016/11/10/how-to-catch-up-my-git-fork-to-master/

git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
git remote -v     should show:
    origin https://github.com/garydgregory/thrift.git (fetch)
    origin https://github.com/garydgregory/thrift.git (push)
    upstream https://github.com/apache/thrift.git (fetch)
    upstream https://github.com/apache/thrift.git (push)

git fetch upstream
git checkout master
git merge upstream/master

----


Show URL of origin:
git remote -v


--------- for a fork, in gitlab, by hand stay updated with upstream:
git remote add upstream https://gitlab.com/fastalgorithms/fmm3dbie
git checkout master
git fetch upstream
git pull upstream master
---- now merge those upstream into current branch too (!):
git checkout feature/issue-14-hedgehog
git merge master
git commit -a -m "merged from Manas upstream"
git push
--- this is painful.
But: gitlab doesn't have this automatically, unless pay them $.
Also see: https://gitlab.atvg-studios.com/atjontv/Scripts/tree/gitsync script


Merge a specific file from another branch. And there is the steps:
$ git checkout <another-branch> <path-to-file> [<one-more-file> ...]
$ git status
$ git commit -m "'Merge' specific file from '<another-branch>'"

get diff since prev commits:

git whatchanged --since="1 month ago" -p filename
git whatchanged --since="1 day ago" -p filename
etc


-------- for a branch, bring in updates from master?
git checkout branch
git merge origin/master
resolve conflicts
commit

----- get a file from a branch
git checkout branch file


---------- pruning old branches:
# list all
git branch -a
# list all that have been merged (safe to delete)...
git branch -a --merged
# delete locally
git branch -d foobranch
# delete on origin server
git push origin --delete foobranch
# update the local list of what's on remote...
git remote prune origin
